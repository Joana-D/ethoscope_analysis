DATA_DIR <- "C://Users/u0118120/Documents/ethoscope"
list.files(DATA_DIR)
setwd(DATA_DIR)

#2: From experiment design to metadata,
#2-1 Loading libraries 
library(behavr)
library(scopr)
library(sleepr)

#3: loading and reading metadata file
metadata <- fread("metadata.csv")
metadata

#4: Linking, link metadata with ethoscope
metadata <- link_ethoscope_metadata(metadata, 
                                    result_dir = "ethoscope_results")
print(metadata)

#5: Loading raw data without dead or escaped animals [e.g status == "Ok","Dead", Escaped]
## this can be used to select animals with specific criteria
metadata_subset <- metadata[status == "OK"]
dt <- load_ethoscope(metadata_subset,
                     # FUN = sleepr::sleep_annotation, 
                     verbose=FALSE)
summary(dt)
print(dt)
# 
# max_velo <- max_velocity_detector(dt, time_window_length = 10,
#                       velocity_correction_coef = 0.01, masking_duration = 6)
# 
# dt_annotated2 <- sleep_annotation(dt, time_window_length = 10, min_time_immobile = 300,
#                  motion_detector_FUN = max_velocity_detector(dt,10, velocity_correction_coef = 0.01))


#6: setting Zeitgeber (ZT0). here light starts at 06:00 AM summer time, 07:00 AM winter time
#if CT20 should be at 09:00 AM -- 11:00 AM summter time, 12:00 noon winter time
#if CT8 should be at 09:00 AM -- 11:00 PM summter time, 00:00 midnight winter time
#if CT14 should be at 09:00 AM -- 05:00 PM summer time, 06:00 PM winter time
dt <- load_ethoscope(metadata_subset,
                     reference_hour=7.0, 
                     FUN = sleepr::sleep_annotation, 
                     verbose=FALSE)

#when you want to combine data from summer and winter time

# dt_curated <- dt[xmv(machine_name) == 'ETHOSCOPE_003']

#9: data curation and removing dead animals automaticly. 
#* In case it is not work, delete the dead fly from the metadata file and rerun script.
#** curated data has another name so we can see the difference [dt vs dt_curated] 
library(sleepr)
dt_curated <- curate_dead_animals(dt)
summary(dt_curated)
#*** which animals have been removed
setdiff(dt[, id, meta=T],
        dt_curated[, id, meta=T])
-----------------------------------------------
  #11:***DATA_Subset**** # activate when important e.g exclude first day; sleep deprivation
  
  #dt_curated <- subset(dt_curated,  t>= 432000 )
  #dt_curated <- subset(dt_curated,  t< 432000 )
  #dt_curated_SD <- subset(dt_curated, xxx> t & t>=xxx )
  
  #dt_curated <- dt_curated[t %between% c(days(0), days(2))]

#choose days for visualisation [start_datetime & stop_datetime , in seconds] when light start at 06:00 AM
#day 	hour	time	startpoint
#1	  06	  ZT0         0 -   43200
#1	  18	  ZT12	  43200 -   86400
#2	  30	  ZT0	    86400 -  129600
#2	  42	  ZT12	 129600 -  172800
#3	  54	  ZT0	   172800 -  216000
#3	  66	  ZT12	 216000 -  259200
#4	  78	  ZT0	   259200 -  302400
#4	  90	  ZT12	 302400 -  345600
#5	  102	  ZT0	   345600 -  388800
#5	  114	  ZT12	 388800 -  432000
#6	  126	  ZT0	   432000 -  475200
#6	  138	  ZT12	 475200 -  518400
#7    50	  ZT0	   518400 -  561600
#7	  162	  ZT12	 561600 -  604800
#8	  174	  ZT0	   604800 -  604800
#8	  186	  ZT12	 648000 -  691200
#9	  198	  ZT0	   691200 -  734400
#9	  210	  ZT12	 734400 -  777600
#10	  222	  ZT0	   777600 -  820800
#10	  234	  ZT12	 820800 -  864000

-------------------
#***Plotting and analysis****
  ### rejoin: combine datatable bout_n with id, n_bouts, mean_bout_length with metadata to add colour=sex e.g.
  
# Population plots # coulour = lines of compare & facet = layers
library(ggetho)
ggetho(dt_curated, aes(y=asleep, colour=genotype)) +
  stat_pop_etho() +
  stat_ld_annotations(height = 1, alpha=0.1, outline=NA, x_limits = days(c(1.5,3.5)),
                                                                         ld_colours = c("grey", "black")) +
  stat_ld_annotations(height = 1, alpha=0.1, outline=NA, x_limits = days(c(0,1)),
                                                                         ld_colours = c(NA, "black")) +
  # facet_grid(replicate ~ .)+
  theme_classic(base_size=10)+
  #theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  scale_y_continuous("asleep(%)", limits=c(0,1), labels = scales::percent)
  # coord_cartesian(xlim=c(days(1.1), days(3.9)))
  #theme(axis.text.y=element_blank(),axis.ticks.y=element_blank())

## SLEEP DURATION

# Adding phase
dt_curated[, phase := ifelse(t %% hours(24) < hours(12), "L", "D")]

# make new dt with calculations of mean during L and D
summary_dt <- 
  rejoin(dt_curated[,
                    .(
                      sleep_fraction_all = mean(asleep),
                      sleep_fraction_l = mean(asleep[phase == "L"]),
                      sleep_fraction_d = mean(asleep[phase == "D"])
                    ),
                    ,by=id])
summary_dt

# make summary_dt_melted to make two variables: 'phase' and actual value in 'sleep_fraction'
summary_dt_melted <- melt(summary_dt, measure.vars = patterns("sleep_fraction_"),
                          variable.name = "phase", value.name = "sleep_fraction")

# sleep amount during L, D, total 
## plotting summary_dt_melted file, sleep fraction during night time, day time or total sleep 
ggplot(summary_dt_melted, aes(x=phase, y=sleep_fraction, colour=sex)) + 
  geom_boxplot(outlier.colour = NA) +
  geom_jitter(alpha=.5) +
  facet_grid(genotype ~ .) +
  scale_y_continuous(name= "Fraction of time sleeping",labels = scales::percent)+
  theme_bw()

#factor(incubator)
---------------------------------------------------------------------------------------------------------
## BOUTS AND LATENCY
  
# make overall_summary including all calculations (sleep durations, bout length and number, sleep latencies)
  library(sleepr)
bout_dt <- bout_analysis(asleep, dt)
bout_dt <- bout_dt[asleep == TRUE, -"asleep"]

# make new dt bout_summary with id, n_bouts, mean_bout_length
bout_summary <- bout_dt[,
                        .(n_bouts = .N,
                          mean_bout_length = mean(duration)),
                        by=id]
  
  bout_summary <- bout_dt[,.(
    latency = t[1], # the first bout is at t[1]
    first_bout_length = duration[1],
    latency_to_longest_bout = t[which.max(duration)],
    length_longest_bout = max(duration),
    n_bouts = .N,
    mean_bout_length = mean(duration)
  ),
  by=id]
bout_summary

# merge summary_dt(all metadata variables, sleep_fraction_all, sleep_fraction_l, sleep_fraction_d) and 
#bout_summary (latency to first bout, first_bout_length, latency_to_longest_bout, length_longest_bout, n_bouts, mean_bout_length)
overall_summary <- summary_dt[bout_summary]
overall_summary

##BOUTS
# Bout length vs time of the day
ggetho(bout_dt, aes(y=duration / 60, colour=sex), time_wrap = hours(24)) + 
  stat_pop_etho() + 
  facet_grid(genotype ~ .) +
  scale_y_continuous(name= "Bout length (min)")+
  theme_bw()

# make a box plot of bout length for light and dark phases 
ggetho(bout_dt, aes(y=duration / 60, colour=sex)) +
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  facet_grid(genotype ~ .) +
  scale_y_continuous(name= "Bout length (min)")+
  theme_bw()

# Bout number for different genotypes
ggplot(overall_summary, aes(x=genotype, y=n_bouts, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Number of bouts")+
  theme_bw()

# relationship between bout length and bout number, problem: this is over the whole time, both day and night
#this is probably not that helpful
  ggplot(overall_summary, aes(n_bouts, mean_bout_length, colour=sex)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(genotype ~ .) + 
  scale_x_continuous(name="Number of bouts") +
  scale_y_continuous(name="Average bout duration (s)")+
  theme_bw()

#correlation plots sleep duration and bout length or number for light and dark
ggplot(overall_summary, aes(mean_bout_length, sleep_fraction_l, colour=genotype)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(sex ~ .) + 
  scale_x_continuous(name="mean length bouts") +
  scale_y_continuous(name="Fraction of time sleeping during day", limits=c(0,1), labels = scales::percent)+
  theme_bw()

ggplot(overall_summary, aes(n_bouts, sleep_fraction_l, colour=genotype)) +
  geom_point() +
  facet_grid(sex ~ .) + 
  scale_x_continuous(name="Number of bouts") +
  scale_y_continuous(name="Fraction of time sleeping during day", limits=c(0,1), labels = scales::percent)+
  theme_bw()
-----------------------------------------------------------------------------------------------------
##LATENCY
  
## plotting sleep latency for different genotypes
ggplot(overall_summary, aes(x=genotype, y=latency/60, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Sleep latency")+
  theme_bw()

ggplot(overall_summary, aes(latency / 60, sleep_fraction_d, colour=sex)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(genotype ~ .)+
  scale_x_continuous(name= "Sleep latency")+
  scale_y_continuous(name= "Fraction of time sleeping during night")+
  theme_bw()

## plotting sleep latency for different genotypes to longest sleep bout
ggplot(overall_summary, aes(x=genotype, y=latency_to_longest_bout/60, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Sleep latency to longest bout")+
  theme_bw()

ggplot(overall_summary, aes(latency_to_longest_bout/60, sleep_fraction_l, colour=sex)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(genotype ~ .)+
  scale_x_continuous(name= "Sleep latency to longest bout")+
  scale_y_continuous(name= "Fraction of time sleeping during day")+
  theme_bw()
--------------------------------------------------------------------------------------------------------
#time_wrap only from day 1-4 SD night + rebound day, x_limits = days(c(1,4)), time_wrap = hours(24)
