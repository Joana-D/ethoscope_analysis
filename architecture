## only analyse all above plots for LD time

dt_LD <- dt[t %between% c(days(0), days(2))]

# Population plots # coulour = lines of compare & facet = layers
library(ggetho)
ggetho(dt_LD, aes(y=asleep, colour=replicate)) +
  stat_pop_etho() +
  stat_ld_annotations()+
  facet_grid(vial ~ .)+
  # facet_grid(replicate ~ .)+
  theme_classic(base_size=20)+
  #theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  scale_y_continuous("Fraction of time asleep", limits=c(0,1), labels = scales::percent)+
  scale_colour_manual(name= "sex", values = c("red", "blue"))
# coord_cartesian(xlim=c(days(1.1), days(3.9)))
#theme(axis.text.y=element_blank(),axis.ticks.y=element_blank())+

## SLEEP DURATION

# phase variable
dt_LD[, phase := ifelse(t %% hours(24) < hours(12), "L", "D")]

# make new dt with calculations of mean during L and D
summary_dt_LD <- 
  rejoin(dt_LD[,
               .(
                 # sleep_fraction_all = mean(asleep),
                 sleep_fraction_l = mean(asleep[phase == "L"]),
                 sleep_fraction_d = mean(asleep[phase == "D"])
               ),
               ,by=id])
summary_dt_LD

# make summary_dt_melted to make two variables: 'phase' and actual value in 'sleep_fraction'
summary_dt_LD_melted <- melt(summary_dt_LD, measure.vars = patterns("sleep_fraction_"),
                             variable.name = "phase", value.name = "sleep_fraction")

# sleep amount during L, D, total 
## plotting summary_dt_melted file, sleep fraction during night time, day time or total sleep 
ggplot(summary_dt_LD_melted, aes(x=factor(DGRP), y=sleep_fraction, fill=phase)) + 
  geom_boxplot(outlier.colour = NA) +
  geom_jitter(alpha=.5) +
  facet_grid(vial ~ .) +
  scale_y_continuous(name= "Fraction of time asleep",labels = scales::percent)+
  scale_x_discrete(name= "DGRP line #")+
  scale_fill_manual(name= "phase", values = c("grey", "black"), labels = c("light", "dark"))+
  theme_bw(base_size = 20)

#factor(incubator)
#how can I get male and female next to each other for each line?
---------------------------------------------------------------------------------------------------------
  ## BOUTS AND LATENCY
  
  # make overall_summary including all calculations (sleep durations, bout length and number, sleep latencies)
library(sleepr)
bout_dt_LD <- bout_analysis(asleep, dt_LD)
bout_dt_LD <- bout_dt_LD[asleep == TRUE, -"asleep"]

# make new dt bout_summary with id, n_bouts, mean_bout_length
bout_summary_LD <- bout_dt_LD[,
                              .(n_bouts = .N,
                                mean_bout_length = mean(duration)),
                              by=id]

# merge summary_dt(all metadata variables, sleep_fraction_all, sleep_fraction_l, sleep_fraction_d) and 
#bout_summary (n_bouts, mean_bout_length)
overall_summary_LD <- summary_dt_LD[bout_summary_LD]
overall_summary_LD

bout_dt_LD_Dark <- bout_dt_LD[t %between%  c(days(0)+ hours(12), days(1)) | t %between% c(days(1)+ hours(12), days(2))]
bout_dt_LD_Dark$date <- bout_dt_LD_Dark$t %/% days(1)
bout_dt_LD_Dark$time <- bout_dt_LD_Dark$t %% days(1)-hours(12)

## we first sample the night of day 0 (hour 12-24) and the night of day 1 (hour 36-48)
## everything that's within the first day (day0-day1) --> day 0, the remainder --> day 1
## %/% operator: quotient -- e.g. 13hours divided by 24hours = 0, 37hours divided by 24 hours = 1
## %% operator: remainder -- e.g. 37hours divided by 24hours = 13 - 12hours = 1

# if you only want to look at one night (or day)
# bout_dt_LD_Dark[, t:= t - hours(12)]

bout_dt_LD_Dark[,.(latency = min(t %%days(1) - hours(12))), by = .(id, t%/%days(1))][,list(average=mean(latency)), by=id]

bout_dt_LD_Light <- bout_dt_LD[t %between%  c(days(0), days(0) + hours(12)) & c(days(1), days(1)+ hours(12))]
# We express t relatively to day 0
bout_dt_LD_Light[, t:= t - days(0)]

bout_summary_LD_d <- bout_dt_LD_Dark[,.(
  latency_d = t[0], # the first bout is at t[1]
  first_bout_length_d = duration[1],
  latency_to_longest_bout_d = t[which.max(duration)],
  length_longest_bout_d = max(duration),
  n_bouts = .N,
  mean_bout_length = mean(duration)
),
by=id]
bout_summary_LD_d

bout_summary_LD_l <- bout_dt_LD_Light[,.(
  latency_l = t[1], # the first bout is at t[1]
  first_bout_length_l = duration[1],
  latency_to_longest_bout_l = t[which.max(duration)],
  length_longest_bout_l = max(duration),
  n_bouts = .N,
  mean_bout_length = mean(duration)
),
by=id]
bout_summary_LD_l

# merge summary_dt(all metadata variables, sleep_fraction_all, sleep_fraction_l, sleep_fraction_d) and 
#bout_summary (for both D and L: latency to first bout, first_bout_length, latency_to_longest_bout, length_longest_bout, n_bouts, mean_bout_length)
overall_summary_LD_l <- summary_dt_LD[bout_summary_LD_l]
overall_summary_LD_l

overall_summary_LD_d <- summary_dt_LD[bout_summary_LD_d]
overall_summary_LD_d

##BOUTS

# # make these two plots for DGRP lines separately

# Bout length vs time of the day
ggetho(bout_dt_LD, aes(y=duration / 60, colour=sex), time_wrap = hours(24)) +
  stat_pop_etho() +
  stat_ld_annotations()+
  facet_grid(DGRP ~ .) +
  scale_y_continuous(name= "Bout length (min)")+
  scale_colour_manual(values = c("red", "blue"))+
  theme_classic(base_size = 15)
# 
## Bout length for different genotypes during night
ggplot(overall_summary_LD_d, aes(x=factor(DGRP), y=mean_bout_length/60, colour=sex)) +
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  # facet_grid(vial ~ .)+
  scale_y_continuous(name= "Bout length (min)")+
  theme_bw(base_size = 20)+
  scale_x_discrete(name= "DGRP line #")+
  scale_colour_manual(values = c("red", "blue"))

# Bout number for different genotypes during night
ggplot(overall_summary_LD_d, aes(x=factor(DGRP), y=n_bouts, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  facet_grid(vial ~ .)+
  scale_y_continuous(name= "Number of bouts during night")+
  theme_bw(base_size = 20)+
  scale_x_discrete(name= "DGRP line #")+
  scale_colour_manual(values = c("red", "blue"))

# relationship between bout length and bout number, problem: this is over the whole time, both day and night
#this is probably not that helpful
# ggplot(overall_summary_LD_d, aes(n_bouts, mean_bout_length, colour=sex)) +
#   geom_point() +
#   geom_smooth(method="lm", alpha=.1)+
#   # facet_grid(factor(DGRP) ~ .) + 
#   scale_x_continuous(name="Number of bouts") +
#   scale_y_continuous(name="Average bout duration (s)")+
#   theme_bw()

#correlation plots sleep duration and bout length or number for light and dark
ggplot(overall_summary_LD, aes(n_bouts, sleep_fraction_d, colour=factor(DGRP))) +
  geom_point() +
  # geom_smooth(method="lm", alpha=.1)+
  # facet_grid(sex ~ .) + 
  scale_x_continuous(name="number of bouts") +
  scale_y_continuous(name="Fraction of time asleep during night", limits=c(0,1), labels = scales::percent)+
  # scale_colour_discrete(name="DGRP line #")+
  theme_bw(base_size = 15)
  # scale_colour_manual(values = c("red", "blue"))

ggplot(overall_summary_LD, aes(mean_bout_length /60, sleep_fraction_d, colour=factor(DGRP))) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  # facet_grid(sex ~ .) + 
  scale_x_continuous(name="mean bout length (min)") +
  scale_y_continuous(name="Fraction of time asleep during night", limits=c(0,1), labels = scales::percent)+
  # scale_colour_discrete(name="sex")+
  theme_bw(base_size = 15)
  # scale_colour_manual(values = c("red", "blue"))
-----------------------------------------------------------------------------------------------------
  ### LATENCY DURING D AND L IN BOTH CYCLES (LD and LD) ###
  
  # merge summary_dt(all metadata variables, sleep_fraction_all, sleep_fraction_l, sleep_fraction_d) and 
  #bout_summary (for both D and L: latency to first bout, first_bout_length, latency_to_longest_bout, length_longest_bout, n_bouts, mean_bout_length)
  overall_summary_LD_l <- summary_dt_LD[bout_summary_LD_l]
overall_summary_LD_l

overall_summary_LD_d <- summary_dt_LD[bout_summary_LD_d]
overall_summary_LD_d

## plotting sleep latency for different genotypes (D or L)
ggplot(overall_summary_LD_d, aes(x=factor(DGRP), y=latency_d/60, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Sleep latency (min)")+
  scale_x_discrete(name="DGRP line #") +
  scale_colour_manual(values = c("grey", "black"))+
  theme_bw()

ggplot(overall_summary_LD_l, aes(x=factor(DGRP), y=latency_l/60, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Sleep latency (min)")+
  scale_x_discrete(name="DGRP line #") +
  scale_colour_manual(values = c("grey", "black"))+
  theme_bw()

ggplot(overall_summary_LD, aes(latency / 60, sleep_fraction_d, colour=sex)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(genotype ~ .)+
  scale_x_continuous(name= "Sleep latency")+
  scale_y_continuous(name= "Fraction of time sleeping during night")+
  theme_bw()

## plotting sleep latency for different genotypes to longest sleep bout
ggplot(overall_summary_LD, aes(x=genotype, y=latency_to_longest_bout/60, colour=sex)) + 
  geom_boxplot(outlier.colour = NA)+
  geom_jitter(alpha=.5) +
  scale_y_continuous(name= "Sleep latency to longest bout")+
  theme_bw()

ggplot(overall_summary_LD, aes(latency_to_longest_bout/60, sleep_fraction_l, colour=sex)) +
  geom_point() +
  geom_smooth(method="lm", alpha=.1)+
  facet_grid(genotype ~ .)+
  scale_x_continuous(name= "Sleep latency to longest bout")+
  scale_y_continuous(name= "Fraction of time sleeping during day")+
  theme_bw()
